@functions {
    T CreateButtonItem<T>(string name, string text, string iconID) where T: RibbonButtonItem {
        return CreateButtonItem<T>(name, text, RibbonItemSize.Small, iconID);
    }
    T CreateButtonItem<T>(string name, string text, RibbonItemSize size, string iconID) where T: RibbonButtonItem {
        var item = Activator.CreateInstance<T>();
        item.Name = name;
        item.Text = text;
        item.Size = size;
        if(size == RibbonItemSize.Large)
            item.LargeImage.IconID = iconID;
        else
            item.SmallImage.IconID = iconID;
        return item;
    }
}

@Html.DevExpress().Ribbon(
    settings => {
        settings.Name = "ribbon";
        settings.ClientSideEvents.ActiveTabChanged = "function(s, e) { DXEventMonitor.Trace(s, e, 'ActiveTabChanged') }";
        settings.ClientSideEvents.FileTabClicked = "function(s, e) { DXEventMonitor.Trace(s, e, 'FileTabClicked') }";
        settings.ClientSideEvents.CommandExecuted = "function(s, e) { DXEventMonitor.Trace(s, e, 'CommandExecuted') }";
        settings.ClientSideEvents.Init = "function(s, e) { DXEventMonitor.Trace(s, e, 'Init') }";
        settings.ClientSideEvents.MinimizationStateChanged = "function(s, e) { DXEventMonitor.Trace(s, e, 'MinimizationStateChanged') }";
        settings.ClientSideEvents.DialogBoxLauncherClicked = "function(s, e) { DXEventMonitor.Trace(s, e, 'DialogBoxLauncherClicked') }";

        var typesItem = settings.Tabs.Add("Item Types");
        
        var buttonsGroup = typesItem.Groups.Add("Buttons");
        buttonsGroup.Name = "Buttons";
        buttonsGroup.ShowDialogBoxLauncher = true;
        buttonsGroup.Items.Add(CreateButtonItem<RibbonButtonItem>("Cut", "Cut", IconID.EditCut16x16));
        buttonsGroup.Items.Add(CreateButtonItem<RibbonButtonItem>("Copy", "Copy", IconID.EditCopy16x16));
        buttonsGroup.Items.Add(CreateButtonItem<RibbonButtonItem>("Paste", "Paste", "edit_paste_16x16"));

        var dropDownButtonItem = CreateButtonItem<RibbonDropDownButtonItem>("DropDownButton", "DropDown Button", RibbonItemSize.Large, IconID.ActionsOpen32x32);
        dropDownButtonItem.ItemStyle.Width = Unit.Pixel(65);
        dropDownButtonItem.Items.Add(
            CreateButtonItem<RibbonDropDownButtonItem>("Pdf", "Pdf", IconID.ExportExporttopdf16x16),
            CreateButtonItem<RibbonDropDownButtonItem>("Txt", "Txt", IconID.ExportExporttotxt16x16),
            CreateButtonItem<RibbonDropDownButtonItem>("Xml", "Xml", IconID.ExportExporttoxml16x16)
        );
        buttonsGroup.Items.Add(dropDownButtonItem);

        var editorsGroup = typesItem.Groups.Add("Editor Items");
        editorsGroup.Name = "EditorItems";
        editorsGroup.ShowDialogBoxLauncher = true;
        var editorItemsItem = (RibbonComboBoxItem)editorsGroup.Items.Add(MVCxRibbonItemType.ComboBoxItem);
        editorItemsItem.PropertiesComboBox.Width = Unit.Pixel(100);
        editorItemsItem.PropertiesComboBox.NullText = "ComboBox";
        editorItemsItem.Items.Add("Name");
        editorItemsItem.Items.Add("Last Name");
        editorItemsItem.Items.Add("City");

        var spinEditItem = (RibbonSpinEditItem)editorsGroup.Items.Add(MVCxRibbonItemType.SpinEditItem);
        spinEditItem.PropertiesSpinEdit.Width = Unit.Pixel(100);
        spinEditItem.PropertiesSpinEdit.NullText = "SpinEdit";

        var dateEditItem = (RibbonDateEditItem)editorsGroup.Items.Add(MVCxRibbonItemType.DateEditItem);
        dateEditItem.PropertiesDateEdit.Width = Unit.Pixel(100);
        dateEditItem.PropertiesDateEdit.NullText = "DateEdit";

        var textBoxItem = (RibbonTextBoxItem)editorsGroup.Items.Add(MVCxRibbonItemType.TextBoxItem);
        textBoxItem.PropertiesTextBox.Width = Unit.Pixel(100);
        textBoxItem.PropertiesTextBox.NullText = "TextBox";

        var toogleOptionsGroup = typesItem.Groups.Add("Toggle & Options");
        toogleOptionsGroup.Name = "Toggle & Options";
        toogleOptionsGroup.ShowDialogBoxLauncher = true;
        var option1Item = (RibbonOptionButtonItem)toogleOptionsGroup.Items.Add(MVCxRibbonItemType.OptionButtonItem, "Option1", "Option 1");
        option1Item.OptionGroupName = "Group1";
        option1Item.SmallImage.IconID = IconID.AlignmentAlignverticalleft216x16;

        var option2Item = (RibbonOptionButtonItem)toogleOptionsGroup.Items.Add(MVCxRibbonItemType.OptionButtonItem, "Option2", "Option 2");
        option2Item.OptionGroupName = "Group1";
        option2Item.SmallImage.IconID = IconID.AlignmentAlignhorizontalcenter216x16;

        var option3Item = (RibbonOptionButtonItem)toogleOptionsGroup.Items.Add(MVCxRibbonItemType.OptionButtonItem, "Option3", "Option 3");
        option3Item.OptionGroupName = "Group1";
        option3Item.SmallImage.IconID = IconID.AlignmentAlignhorizontalbottom216x16;

        toogleOptionsGroup.Items.Add(CreateButtonItem<RibbonToggleButtonItem>("ToggleButton", "Toggle Button", RibbonItemSize.Large, IconID.ProgrammingBugreport32x32));

        var dropDownToggleButtonsItem = CreateButtonItem<RibbonDropDownButtonItem>("", "DropDown Toggle Buttons", RibbonItemSize.Large, IconID.SetupProperties32x32);
        dropDownToggleButtonsItem.DropDownMode = false;
        dropDownToggleButtonsItem.Items.Add(CreateButtonItem<RibbonDropDownToggleButtonItem>("DropDownToggleButton1", "Drop Down Toggle Button 1", ""));
        dropDownToggleButtonsItem.Items.Add(CreateButtonItem<RibbonDropDownToggleButtonItem>("DropDownToggleButton2", "Drop Down Toggle Button 2", "content_checkbox_16x16"));
        toogleOptionsGroup.Items.Add(dropDownToggleButtonsItem);

        var сolorGroup = typesItem.Groups.Add("Color");
        сolorGroup.Name = "Color";
        сolorGroup.ShowDialogBoxLauncher = true;
        var colorItem = (RibbonColorButtonItem)сolorGroup.Items.Add(MVCxRibbonItemType.ColorButtonItem, "ColorButton", "Color");
        colorItem.Color = Color.Red;
        colorItem.Size = RibbonItemSize.Large;
        colorItem.LargeImage.IconID = IconID.FormatChangefontstyle32x32;

        var miscTab = settings.Tabs.Add("Misc");
        var findGroup = miscTab.Groups.Add("Find");
        findGroup.Name = "Find";
        findGroup.ShowDialogBoxLauncher = true;
        findGroup.Items.Add(
                CreateButtonItem<RibbonButtonItem>("Find", "Find", RibbonItemSize.Large, IconID.FindFind32x32),
                CreateButtonItem<RibbonButtonItem>("By ID", null, RibbonItemSize.Small, IconID.FindFindbyid16x16)
            );

        var exportGroup = miscTab.Groups.Add("Export");
        exportGroup.Name = "Export";
        exportGroup.ShowDialogBoxLauncher = true;
        var exportItem = (RibbonDropDownButtonItem)exportGroup.Items.Add(MVCxRibbonItemType.DropDownButtonItem, "Export", "Export");
        exportItem.Size = RibbonItemSize.Large;
        exportItem.LargeImage.IconID = IconID.ExportExport32x32;
        exportItem.Items.Add(
            CreateButtonItem<RibbonDropDownButtonItem>("DOC", "DOC", IconID.ExportExporttodoc16x16),
            CreateButtonItem<RibbonDropDownButtonItem>("PDF", "PDF", IconID.ExportExporttopdf16x16),
            CreateButtonItem<RibbonDropDownButtonItem>("TXT", "TXT", IconID.ExportExporttotxt16x16)
        );
    }).GetHtml()

<br />
@Html.Partial("EventMonitor")