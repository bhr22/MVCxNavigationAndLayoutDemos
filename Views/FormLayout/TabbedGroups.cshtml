@model FormLayoutContactInfo

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}
@functions{
    void ApplyDefaultTextBoxSettings(MVCxFormLayoutItem itemSettings){
        itemSettings.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
        var tbSettings = (TextBoxSettings)itemSettings.NestedExtensionSettings;
        tbSettings.ShowModelErrors = true;
        tbSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
        tbSettings.Properties.ValidationSettings.ErrorText = "*";
    }
}
@section AdditionalResources {
    <style type="text/css">
        .container {
            width: 400px;
            margin: auto;
        }
        .parentContainer {
            width: 100%;
        }
        .tabbedGroupPageControlCell {
            padding-left: 0px;
            padding-right: 0px;
        }
        .tabbedGroupPageControlCell {
            padding: 0 5px 10px;
            border-top: 1px Solid #A8A8A8;
        }
        .selectedElement,
        .tabbedGroupPageControlCell {
            background-color: #FDFBBA;
        }
        .radioButtonList .dxe {
            padding:0px!important; 
        }
    </style>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
}

<script type="text/javascript">
    function OnContactMethodChanged(s, e) {
        var selectedIndex = s.GetSelectedIndex();
        UpdateRadioButtonListDecoration(s);
        tabbedGroup.SetActiveTabIndex(selectedIndex);
    }
    function UpdateRadioButtonListDecoration(radioButtonList) {
        var selectedIndex = radioButtonList.GetSelectedIndex();
        for (var i = 0; i < radioButtonList.GetItemCount(); i++)
            radioButtonList.GetItemElement(i).parentNode.className = i === selectedIndex ? "selectedElement" : "";
    }
    function OnTabbedGroupPageControlInit(s, e) {
        s.SetActiveTabIndex(radioButtonList.GetSelectedIndex());
    }
    function OnSubmitChanges(s, e){
	    if($("form").valid())
            alert('Thank you!');
    }
</script>

@using (Html.BeginForm()){
    <div class="container">
        @Html.DevExpress().FormLayout(settings => {
            settings.Name = "typeOfContact";
            settings.AlignItemCaptions = false;
            settings.ShowItemCaptionColon = false;
            settings.Width = Unit.Percentage(100);
            settings.EncodeHtml = false;

            settings.Items.Add(m => m.Type, itemSettins => {
                itemSettins.Caption = "<b>Contact me through:</b>";
                itemSettins.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
                itemSettins.NestedExtensionType = FormLayoutNestedExtensionItemType.RadioButtonList;
                RadioButtonListSettings rbSettings = (RadioButtonListSettings)itemSettins.NestedExtensionSettings;
                rbSettings.Name = "radioButtonList";
                rbSettings.Properties.ClientSideEvents.Init = "UpdateRadioButtonListDecoration";
                rbSettings.Properties.ClientSideEvents.SelectedIndexChanged = "OnContactMethodChanged";
                rbSettings.ControlStyle.Border.BorderWidth = 0;
                rbSettings.ControlStyle.CssClass = "radioButtonList";
                rbSettings.Width = Unit.Percentage(100);
                foreach(string item in Enum.GetNames(typeof(FormLayoutContactInfo.ContactType))) {
                    rbSettings.Properties.Items.Add(Regex.Replace(item, "((?<=[a-z])(?=[A-Z]))|((?<=[A-Z])(?=[A-Z][a-z]))", " $1"), item);
                }
            });

            var tabbedGroupItem = settings.Items.AddTabbedGroupItem();
            tabbedGroupItem.Name = "tabbedGroup";
            tabbedGroupItem.Caption = "TabbedGroup";
            tabbedGroupItem.ShowGroupDecoration = false;
            tabbedGroupItem.ParentContainerStyle.CssClass = "tabbedGroupPageControlCell";
            tabbedGroupItem.ClientSideEvents.Init = "OnTabbedGroupPageControlInit";
            tabbedGroupItem.Width = Unit.Percentage(100);

            var emailGroup = tabbedGroupItem.Items.AddGroupItem(m => m.Email);
            emailGroup.GroupBoxDecoration = GroupBoxDecoration.None;
            emailGroup.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            emailGroup.Items.Add(m => m.Email.Email, s => {
                ApplyDefaultTextBoxSettings(s);
                s.NestedExtensionSettings.Width = 170;
            });
            emailGroup.Items.Add(m => m.Email.RetypeEmail, s => {
                ApplyDefaultTextBoxSettings(s);
                s.NestedExtensionSettings.Width = 170;
            });

            var phoneGroup = tabbedGroupItem.Items.AddGroupItem(m => m.Phone);
            phoneGroup.ColCount = 2;
            phoneGroup.GroupBoxDecoration = GroupBoxDecoration.None;
            phoneGroup.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            phoneGroup.Items.Add(m => m.Phone.Phone, s => {
                ApplyDefaultTextBoxSettings(s);
                TextBoxSettings textBoxSettings = (TextBoxSettings)s.NestedExtensionSettings;
                textBoxSettings.Properties.ValidationSettings.ErrorText = "*";
                textBoxSettings.Width = 170;
            });
            phoneGroup.Items.Add(m => m.Phone.Extension, s => {
                ApplyDefaultTextBoxSettings(s);
                s.ParentContainerStyle.CssClass = "parentContainer";
                s.NestedExtensionSettings.Width = 40;
            });
            phoneGroup.Items.Add(s => {
                s.ColSpan = 2;
                s.ShowCaption = DefaultBoolean.False;
                s.ParentContainerStyle.Paddings.PaddingTop = 10;
            })
            .SetNestedContent("<span>Best Time to Call</span>");
            phoneGroup.Items.Add(m => m.Phone.StartTimeToCall, s => {
                s.CaptionSettings.Location = LayoutItemCaptionLocation.Left;
                s.NestedExtensionType = FormLayoutNestedExtensionItemType.TimeEdit;
                s.NestedExtensionSettings.Width = 92;
            });
            phoneGroup.Items.Add(m => m.Phone.EndTimeToCall, s => {
                s.CaptionSettings.Location = LayoutItemCaptionLocation.Left;
                s.NestedExtensionType = FormLayoutNestedExtensionItemType.TimeEdit;
                s.NestedExtensionSettings.Width = 92;
            });

            var smsGroup = tabbedGroupItem.Items.AddGroupItem(m => m.SMS);
            smsGroup.GroupBoxDecoration = GroupBoxDecoration.None;
            smsGroup.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            smsGroup.Items.Add(m => m.SMS.Provider, s => {
                s.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                ComboBoxSettings cbSettings = (ComboBoxSettings)s.NestedExtensionSettings;
                cbSettings.ShowModelErrors = true;
                cbSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                cbSettings.Properties.Items.Add("Verizon Wireless");
                cbSettings.Properties.Items.Add("Sprint");
                cbSettings.Properties.Items.Add("AT&T");
                cbSettings.Properties.Items.Add("T-Mobile");
            });
            smsGroup.Items.Add(m => m.SMS.Phone, s => ApplyDefaultTextBoxSettings(s));

            var InstantMessengerGroup = tabbedGroupItem.Items.AddGroupItem(m => m.InstantMessenger);
            InstantMessengerGroup.GroupBoxDecoration = GroupBoxDecoration.None;
            InstantMessengerGroup.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            InstantMessengerGroup.Items.Add(m => m.InstantMessenger.ServiceName, s => {
                s.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                ComboBoxSettings cbSettings = (ComboBoxSettings)s.NestedExtensionSettings;
                cbSettings.ShowModelErrors = true;
                cbSettings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.Text;
                cbSettings.Properties.Items.Add("MSN");
                cbSettings.Properties.Items.Add("Skype");
                cbSettings.Properties.Items.Add("Jabber");
                cbSettings.Properties.Items.Add("ICQ");
            });
            InstantMessengerGroup.Items.Add(m => m.InstantMessenger.MessengerID, s => { ApplyDefaultTextBoxSettings(s); });

            var postalServiceGroup = tabbedGroupItem.Items.AddGroupItem(m => m.PostalService);
            postalServiceGroup.ColCount = 2;
            postalServiceGroup.GroupBoxDecoration = GroupBoxDecoration.None;
            postalServiceGroup.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            postalServiceGroup.Items.Add(m => m.PostalService.Address, s => {
                ApplyDefaultTextBoxSettings(s);
                s.ColSpan = 2;
                s.NestedExtensionSettings.Width = Unit.Percentage(100);
            });
            postalServiceGroup.Items.Add(m => m.PostalService.City, s => { 
                ApplyDefaultTextBoxSettings(s);
                s.ColSpan = 2;
                s.NestedExtensionSettings.Width = Unit.Percentage(100);
            });
            postalServiceGroup.Items.Add(m => m.PostalService.PostCode, s => { 
                ApplyDefaultTextBoxSettings(s);
                s.NestedExtensionSettings.Width = 100;
            });
            postalServiceGroup.Items.Add(m => m.PostalService.Country, s => { ApplyDefaultTextBoxSettings(s); });
    
            settings.Items.Add(s => {
                s.ShowCaption = DefaultBoolean.False;
                s.HorizontalAlign = FormLayoutHorizontalAlign.Right;
                s.ParentContainerStyle.Paddings.PaddingTop = 5;
                s.ParentContainerStyle.Paddings.PaddingRight = 0;
                s.Width = 70;

                s.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
                ButtonSettings btnSettings = (ButtonSettings)s.NestedExtensionSettings;
                btnSettings.Name = "btnSubmit";
                btnSettings.Text = "Submit";
                btnSettings.ClientSideEvents.Click = "OnSubmitChanges";
            });
        }).GetHtml()
    </div>
}